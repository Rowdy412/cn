import heapq

class NetworkGraph:
    def _init_(self, num_nodes):
        self.num_nodes = num_nodes
        self.graph = {i: {} for i in range(num_nodes)}
    
    def add_link(self, u, v, weight):
        """Adds a bidirectional link between nodes u and v with a given weight."""
        self.graph[u][v] = weight
        self.graph[v][u] = weight

    def dijkstra(self, src):
        """Link-State Routing using Dijkstra's algorithm."""
        distances = {node: float('inf') for node in self.graph}
        distances[src] = 0
        priority_queue = [(0, src)]
        path = {src: None}
        
        while priority_queue:
            current_distance, current_node = heapq.heappop(priority_queue)

            if current_distance > distances[current_node]:
                continue

            for neighbor, weight in self.graph[current_node].items():
                distance = current_distance + weight
                if distance < distances[neighbor]:
                    distances[neighbor] = distance
                    heapq.heappush(priority_queue, (distance, neighbor))
                    path[neighbor] = current_node

        return distances, path

    def bellman_ford(self, src):
        """Distance Vector Routing using Bellman-Ford algorithm."""
        distances = {node: float('inf') for node in self.graph}
        distances[src] = 0
        path = {src: None}
        
        for _ in range(self.num_nodes - 1):
            for node in self.graph:
                for neighbor, weight in self.graph[node].items():
                    if distances[node] + weight < distances[neighbor]:
                        distances[neighbor] = distances[node] + weight
                        path[neighbor] = node

        # Check for negative-weight cycles
        for node in self.graph:
            for neighbor, weight in self.graph[node].items():
                if distances[node] + weight < distances[neighbor]:
                    print("Network contains a negative-weight cycle")
                    return None, None

        return distances, path

    def print_path(self, path, dest):
        """Utility function to print path from source to destination."""
        if dest not in path:
            print(f"No path to node {dest}")
            return
        current = dest
        route = []
        while current is not None:
            route.append(current)
            current = path[current]
        print(" -> ".join(map(str, route[::-1])))

# Example usage
network = NetworkGraph(5)
network.add_link(0, 1, 2)
network.add_link(0, 2, 4)
network.add_link(1, 2, 1)
network.add_link(1, 3, 7)
network.add_link(2, 4, 3)
network.add_link(3, 4, 1)

# Link-State Routing (Dijkstra's)
print("Link-State Routing (Dijkstra's Algorithm):")
src_node = 0
distances, path = network.dijkstra(src_node)
for dest in range(network.num_nodes):
    print(f"Shortest path from {src_node} to {dest}: {distances[dest]}")
    network.print_path(path, dest)

print("\n" + "="*40 + "\n")

# Distance Vector Routing (Bellman-Ford)
print("Distance Vector Routing (Bellman-Ford Algorithm):")
distances, path = network.bellman_ford(src_node)
if distances is not None:
    for dest in range(network.num_nodes):
        print(f"Shortest path from {src_node} to {dest}: {distances[dest]}")
        network.print_path(path, dest)